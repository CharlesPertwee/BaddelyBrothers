<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
    <record id="prepress" model="bb_process.process">
        <field name="name">Prepress</field>
        <field name="estimate">
cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId']:
    qty_params['param_make_ready_time'] = workcenter.make_ready_time
    qty_params['cost_per_unit'] = workcenter.standard_price
    qty_params['price_per_unit'] = workcenter.list_price
    qty_params['margin'] = workcenter.margin_percent
    if qty != 'run_on':
        qty_params['quantity_required'] = qty_params['param_make_ready_time']
    else:
        qty_params['quantity_required'] = 0.00

estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
    
    <record id="blank_cutting" model="bb_process.process">
        <field name="name">Blank Cutting</field>
        <field name="estimate">
def load_qty_break_params(workcenter_Id, qty_params, cost_params, qty):
    if qty == 'run_on':
        high_qty = 0
        if qty_params['quantity_1'] > high_qty:
            high_qty = qty_params['quantity_1']
        if qty_params['quantity_2'] > high_qty:
            high_qty = qty_params['quantity_2']
        if qty_params['quantity_3'] > high_qty:
            high_qty = qty_params['quantity_3']
        if qty_params['quantity_4'] > high_qty:
            high_qty = qty_params['quantity_4']
        quantity_to_process = high_qty 
    else:
        quantity_to_process = cost_params['finished_quantity']

    material_weight = qty_params['param_grammage']

    qty_break_ids = workcenter_Id.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process),('weight_greater_than','&lt;',material_weight)], order='qty_greater_than desc, weight_greater_than desc')
    if (qty_break_ids):
        qty_break = qty_break_ids[0]
        cost_params['param_make_ready_time'] = qty_break.make_ready_time if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter_Id.qty_break_params) > 0:
        qty_break = workcenter_Id.qty_break_params[0]
        cost_params['param_make_ready_time'] = qty_break.make_ready_time if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId','param_grammage']:
   load_qty_break_params(workcenter_Id,qty_params,cost_params,qty)

elif estimate.fieldUpdated == 'param_printed_material':
    if qty_params['param_printed_material']:
        cost_params['param_machine_speed'] = int(cost_params['param_machine_speed']) * 0.75
    else:
        cost_params['param_machine_speed'] = int(cost_params['param_machine_speed']) * (1.00 / 0.75)

sheets_to_process = int(cost_params['finished_quantity']) / int(qty_params['param_number_out'])

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / int(cost_params['param_machine_speed'])
else :
    cost_params['param_running_time'] = 0.0

total_hours = int(cost_params['param_make_ready_time']) + int(cost_params['param_running_time'])

cost_params['quantity_required'] = round(total_hours, 2)


estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
    
    <record id="print_emboss" model="bb_process.process">
        <field name="name">Print/Emboss</field>
        <field name="estimate">
def calculate_working_sheets_needed(qty_params, cost_params, qty):
    running_sheets = int(cost_params['finished_quantity']) / qty_params['param_number_up'] if qty_params['param_number_up'] > 0 else int(cost_params['finished_quantity'])
    return running_sheets

def calculate_overs_needed(qty_params, cost_params, qty):
    running_sheets = int(cost_params['finished_quantity']) / qty_params['param_number_up'] if qty_params['param_number_up'] > 0 else int(cost_params['finished_quantity'])
    running_overs = running_sheets * (cost_params['param_running_overs_percent'] / 100.0)
    return running_overs + cost_params['param_make_ready_overs']

def load_qty_break_params(workcenter_Id,qty_params,cost_params,qty):
    qty_params['param_additional_charge'] = workcenter_Id.additional_charge
    qty_params['param_misc_charge_per_cm2'] = workcenter_Id.misc_charge_per_cm2
    if qty == 'run_on':
        highest_quantity = 0       
        if qty_params['quantity_1'] > highest_quantity:
            highest_quantity = qty_params['quantity_1']
        if qty_params['quantity_2'] > highest_quantity:
            highest_quantity = qty_params['quantity_2']
        if qty_params['quantity_3'] > highest_quantity:
            highest_quantity = qty_params['quantity_3']
        if qty_params['quantity_4'] > highest_quantity:
            highest_quantity = qty_params['quantity_4']
        quantity_to_process = highest_quantity/qty_params['param_number_up'] if qty_params['param_number_up'] > 0 else highest_quantity            
    else:
        quantity_to_process = int(cost_params['finished_quantity'])/qty_params['param_number_up'] if qty_params['param_number_up'] > 0 else int(cost_params['finished_quantity'])

        material_weight = qty_params['param_grammage']
        
    qty_break_params = workcenter_Id.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process),('weight_greater_than','&lt;',material_weight)], order='qty_greater_than desc, weight_greater_than desc')
        

    if (qty_break_params):
        qty_break = qty_break_params[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_wash_up_time'] = (qty_break.wash_up_time * qty_params['param_number_of_colors']) if qty != 'run_on' else 0.0
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter_Id.qty_break_params) > 0:
        qty_break = workcenter_Id.qty_break_params[len(workcenter_Id.qty_break_params)-1]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_wash_up_time'] = (qty_break.wash_up_time * qty_params['param_number_of_colors']) if qty != 'run_on' else 0.0
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = workcenter_Id.margin_percent

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

fields = ['workcenterId','material','grammage','param_number_up','param_number_of_colours','param_number_of_colours_rev','param_number_of_mixes','param_die_size']
if estimate.fieldUpdated in fields:
    load_qty_break_params(workcenter,qty_params,cost_params,qty)
    
    number_of_colors = qty_params['param_number_of_colors'] + qty_params['param_number_of_colors_rev']
                    
    cost_params['param_make_ready_time'] = round(float((cost_params['param_make_ready_time']/60)*100),2)
    cost_params['param_make_ready_time'] = cost_params['param_make_ready_time'] * number_of_colors
    cost_params['param_machine_speed'] = cost_params['param_machine_speed'] / number_of_colors
    cost_params['param_make_ready_overs'] = cost_params['param_make_ready_overs'] * number_of_colors
    
    if qty_params['param_die_size'] == 'small':
        cost_params['param_make_ready_time'] += 0.29
        cost_params['param_machine_speed'] = cost_params['param_machine_speed'] * 0.8                    
    if qty_params['param_die_size'] == 'medium':
        cost_params['param_make_ready_time'] += 0.57
        cost_params['param_machine_speed'] = cost_params['param_machine_speed'] * 0.75                    
    if qty_params['param_die_size'] == 'large':
        cost_params['param_make_ready_time'] += 1.0
        cost_params['param_machine_speed'] = cost_params['param_machine_speed'] * 0.5
        
    ink_mix_time = workcenter.ink_mix_time * qty_params['param_no_of_ink_mixes']
    if ink_mix_time:
         cost_params['param_make_ready_time'] += ink_mix_time
    
sheets_to_process = calculate_working_sheets_needed(qty_params,cost_params, qty) + calculate_overs_needed(qty_params,cost_params, qty)

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / cost_params['param_machine_speed']
else :
    cost_params['param_running_time'] = 0.0

total_hours = cost_params['param_make_ready_time'] + cost_params['param_running_time'] + cost_params['param_wash_up_time']

cost_params['quantity_required'] = round(total_hours, 2)

estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
   
    <record id="guillotine" model="bb_process.process">
        <field name="name">Guillotine</field>
        <field name="estimate">
        
        </field>
    </record>
   
    <record id="outwork" model="bb_process.process">
        <field name="name">Outwork</field>
        <field name="estimate">
cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId']:
    #if process.seller_ids:
    #    gen_params['param_supplier_id'] = process.seller_ids[0].name.id
    cost_params['cost_per_unit'] = workcenter.standard_price
    cost_params['price_per_unit'] = workcenter.list_price
    cost_params['margin'] = workcenter.margin_percent
    cost_params['quantity_required'] = 1.0
    
estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
   
    <record id="envelope" model="bb_process.process">
        <field name="name">Envelope</field>
        <field name="estimate">
def calculate_working_sheets_needed(qty_params, cost_params, qty):
    running_sheets = cost_params['finished_quantity']
    return running_sheets

def calculate_overs_needed(qty_params, cost_params, qty):
    running_sheets = cost_params['finished_quantity']
    running_overs = running_sheets * (cost_params['param_running_overs_percent'] / 100.0)
    return running_overs + cost_params['param_make_ready_overs']

def load_qty_break_params(workcenter, qty_params, cost_params, qty):
    
    # Set default general parameters
    qty_params['param_additional_charge'] = workcenter.additional_charge

    # Re-load params based on material and qty-break data
    if qty == 'run_on':
        high_qty = 0
        if qty_params['quantity_1'] > high_qty:
            high_qty = qty_params['quantity_1']
        if qty_params['quantity_2'] > high_qty:
            high_qty = qty_params['quantity_2']
        if qty_params['quantity_3'] > high_qty:
            high_qty = qty_params['quantity_3']
        if qty_params['quantity_4'] > high_qty:
            high_qty = qty_params['quantity_4']
        quantity_to_process = high_qty 
    else:
        quantity_to_process = cost_params['finished_quantity'] if 'finished_quantity' in cost_params.keys() else ''
    
    material_weight = qty_params['param_grammage']
    
    qty_break_ids = workcenter.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process),('weight_greater_than','&lt;',material_weight)], order='qty_greater_than desc, weight_greater_than desc')
    
    if (qty_break_ids):
        qty_break = qty_break_ids[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter.qty_break_params) > 0:
        qty_break = workcenter.qty_break_params[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId','param_grammage','param_env_windowpatching','param_env_peelandstick','param_env_inlineemboss','param_env_gumming']:
    load_qty_break_params(workcenter, qty_params, cost_params, qty)
    
    if qty_params['param_env_windowpatching']:
        cost_params['param_make_ready_time'] += 0.75
        cost_params['param_make_ready_overs'] += 50.0
        qty_params['param_additional_charge'] += 4.0
    if qty_params['param_env_peelandstick']:
        cost_params['param_make_ready_time'] += 1.5
        cost_params['param_make_ready_overs'] += 20.0
        qty_params['param_additional_charge'] += 2.0
    if qty_params['param_env_inlineemboss']:
        cost_params['param_make_ready_time'] += 0.5
        cost_params['param_make_ready_overs'] += 25.0
    if qty_params['param_env_gumming']:
        cost_params['param_make_ready_time'] += 0.5
        cost_params['param_make_ready_overs'] += 25.0


if estimate.fieldUpdated == 'workcenterId':
    qty_params['req_param_windowpatching'] = workcenter.window_patching_available
    qty_params['req_param_peel_stick'] = workcenter.peel_stick_available
    qty_params['req_param_inline_emboss'] = workcenter.inline_emboss_available
    qty_params['req_param_gumming'] = workcenter.gumming_available

sheets_to_process = calculate_working_sheets_needed(qty_params, cost_params, qty) \
                        + calculate_overs_needed(qty_params, cost_params, qty)

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / int(cost_params['param_machine_speed'])
else :
    cost_params['param_running_time'] = 0.0

total_hours = int(cost_params['param_make_ready_time']) + int(cost_params['param_running_time'])

cost_params['quantity_required'] = round(total_hours, 2)

estimate.update(qty_params,cost_params,qty)        
        </field>
    </record>
   
    <record id="gilding" model="bb_process.process">
        <field name="name">Gilding</field>
        <field name="estimate">
def load_qty_break_params(workcenter,qty_params, cost_params,qty):
    if qty == 'run_on':
        high_qty = 0
        if qty_params['quantity_1'] > high_qty:
            high_qty = qty_params['quantity_1']
        if qty_params['quantity_2'] > high_qty:
            high_qty = qty_params['quantity_2']
        if qty_params['quantity_3'] > high_qty:
            high_qty = qty_params['quantity_3']
        if qty_params['quantity_4'] > high_qty:
            high_qty = qty_params['quantity_4']
        quantity_to_process = high_qty
    else:
        quantity_to_process = cost_params['finished_quantity']
    
    material_weight = qty_params['param_grammage']
    
    qty_break_ids = workcenter.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process),('weight_greater_than','&lt;',material_weight)], order='qty_greater_than desc, weight_greater_than desc')
    
    
    if (qty_break_ids):
        qty_break = qty_break_ids[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter.qty_break_params) > 0:
        process = workcenter.qty_break_params[0]
        cost_params['param_make_ready_time'] = (process.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = process.machine_speed
        cost_params['param_make_ready_overs'] = process.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = process.running_overs_percent
        cost_params['cost_per_unit'] = process.standard_price
        cost_params['price_per_unit'] = process.list_price
        cost_params['margin'] = process.margin_percent

def calculate_working_sheets_needed(qty_params, cost_params, qty):
    running_sheets = cost_params['finished_quantity']
    return running_sheets

def calculate_overs_needed(qty_params, cost_params, qty):
    running_sheets = int(cost_params['finished_quantity'])
    running_overs = running_sheets * (float(cost_params['param_running_overs_percent']) / 100.0)
    return running_overs + int(cost_params['param_make_ready_overs'])


cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId','param_grammage']:
    load_qty_break_params(workcenter, qty_params, cost_params, qty)

sheets_to_process = int(calculate_working_sheets_needed(qty_params, cost_params, qty)) \
                        + calculate_overs_needed(qty_params, cost_params, qty)

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / cost_params['param_machine_speed']
else :
    cost_params['param_running_time'] = 0.0

total_hours = cost_params['param_make_ready_time'] + cost_params['param_running_time']

cost_params['quantity_required'] = round(total_hours, 2)

estimate.update(qty_params,cost_params,qty)        
        </field>
    </record>
   
    <record id="duplex" model="bb_process.process">
        <field name="name">Duplex</field>
        <field name="estimate">
def load_qty_break_params(workcenter, qty_params, cost_params, qty):
    # Set default general parameters
    qty_params['param_additional_charge'] = workcenter.additional_charge

    # Re-load params based on material and qty-break data
    if qty == 'run_on':
        high_qty = 0
        if qty_params['quantity_1'] > high_qty:
            high_qty = qty_params['quantity_1']
        if qty_params['quantity_2'] > high_qty:
            high_qty = qty_params['quantity_2']
        if qty_params['quantity_3'] > high_qty:
            high_qty = qty_params['quantity_3']
        if qty_params['quantity_4'] > high_qty:
            high_qty = qty_params['quantity_4']
        quantity_to_process = high_qty / qty_params['param_number_up']
    else:
        quantity_to_process = cost_params['finished_quantity'] / qty_params['param_number_up']
    qty_break_ids = workcenter.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process)], order='qty_greater_than desc, weight_greater_than desc')
    
    if (qty_break_ids):
        qty_break = qty_break_ids[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        #if field_updated != 'param_make_ready_overs':
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        #if field_updated != 'param_running_overs_percent':
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter.qty_break_params) > 0:
        process = workcenter.qty_break_params[0]
        cost_params['param_make_ready_time'] = (process.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = process.machine_speed
        #if field_updated != 'param_make_ready_overs':
        cost_params['param_make_ready_overs'] = process.make_ready_overs if qty != 'run_on' else 0.0
        #if field_updated != 'param_running_overs_percent':
        cost_params['param_running_overs_percent'] = process.running_overs_percent
        cost_params['cost_per_unit'] = process.standard_price
        cost_params['price_per_unit'] = process.list_price
        cost_params['margin'] = process.margin_percent

def calculate_working_sheets_needed(qty_params, cost_params, qty):
    running_sheets = (cost_params['finished_quantity'] / qty_params['param_number_up'])
    return running_sheets

def calculate_overs_needed(qty_params, cost_params, qty):
    running_sheets = (cost_params['finished_quantity'] / qty_params['param_number_up'])
    running_overs = running_sheets * (cost_params['param_running_overs_percent'] / 100.0)
    return running_overs + cost_params['param_make_ready_overs']

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty
if estimate.fieldUpdated in ['workcenterId', 'param_number_up', 'param_duplex_sheets', 'param_number_of_sheets']:
    load_qty_break_params(workcenter, qty_params, cost_params, qty)
    if qty_params['param_duplex_sheets'] == 'three':
        cost_params['param_machine_speed'] = cost_params['param_machine_speed'] * 0.6
    elif qty_params['param_duplex_sheets'] == 'four':
        cost_params['param_machine_speed'] = qty_params['param_machine_speed'] * 0.4
    elif qty_params['param_duplex_sheets'] == 'five':
        cost_params['param_machine_speed'] = cost_params['param_machine_speed'] * 0.25

working_sheets = (calculate_working_sheets_needed(qty_params, cost_params, qty) * qty_params['param_number_of_sheets'])

sheets_to_process = working_sheets + calculate_overs_needed(qty_params, cost_params, qty)

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / cost_params['param_machine_speed']
else :
    cost_params['param_running_time'] = 0.0

total_hours = cost_params['param_make_ready_time'] + cost_params['param_running_time']

cost_params['quantity_required'] = round(total_hours, 2)
estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
   
    <record id="window_patching" model="bb_process.process">
        <field name="name">Window Patching</field>
        <field name="estimate">
def load_qty_break_params(workcenter, qty_params, cost_params, qty):
    # Re-load params based on material and qty-break data
    if qty == 'run_on':
        high_qty = 0
        if qty_params['quantity_1'] > high_qty:
            high_qty = qty_params['quantity_1']
        if qty_params['quantity_2'] > high_qty:
            high_qty = qty_params['quantity_2']
        if qty_params['quantity_3'] > high_qty:
            high_qty = qty_params['quantity_3']
        if qty_params['quantity_4'] > high_qty:
            high_qty = qty_params['quantity_4']
        quantity_to_process = high_qty
    else:
        quantity_to_process = cost_params['finished_quantity']
    
    qty_break_ids = workcenter.qty_break_params.search([('qty_greater_than','&lt;',quantity_to_process)], order='qty_greater_than desc, weight_greater_than desc')
    
    if (qty_break_ids):

        qty_break = qty_break_ids[0]
        cost_params['param_make_ready_time'] = (qty_break.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = qty_break.machine_speed
        cost_params['param_make_ready_overs'] = qty_break.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = qty_break.running_overs_percent
        cost_params['cost_per_unit'] = qty_break.standard_price
        cost_params['price_per_unit'] = qty_break.list_price
        cost_params['margin'] = qty_break.margin_percent
    elif len(workcenter.qty_break_params) > 0:
        process = workcenter.qty_break_params[0]
        cost_params['param_make_ready_time'] = (process.make_ready_time) if qty != 'run_on' else 0.0
        cost_params['param_machine_speed'] = process.machine_speed
        cost_params['param_make_ready_overs'] = process.make_ready_overs if qty != 'run_on' else 0.0
        cost_params['param_running_overs_percent'] = process.running_overs_percent
        cost_params['cost_per_unit'] = process.standard_price
        cost_params['price_per_unit'] = process.list_price
        cost_params['margin'] = process.margin_percent

def calculate_working_sheets_needed(qty_params , cost_params, qty):
    running_sheets = cost_params['finished_quantity']
    return int(running_sheets)

def calculate_overs_needed(qty_params, cost_params,  qty):
    running_sheets = int(cost_params['finished_quantity'])
    running_overs = running_sheets * (float(cost_params['param_running_overs_percent']) / 100.0)
    return running_overs + int(cost_params['param_make_ready_overs'])

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId']:
    load_qty_break_params(workcenter, qty_params, cost_params, qty)

sheets_to_process = calculate_working_sheets_needed( qty_params, cost_params, qty) \
                        + calculate_overs_needed(qty_params, cost_params, qty)

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / cost_params['param_machine_speed']
else :
    cost_params['param_running_time'] = 0.0

total_hours = cost_params['param_make_ready_time'] + cost_params['param_running_time']

cost_params['quantity_required'] = round(total_hours, 2)
estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
    
    <record id="finishing" model="bb_process.process">
        <field name="name">Finishing</field>
        <field name="estimate">
def calculate_working_sheets_needed(qty_params, cost_params, qty):
    running_sheets = int(cost_params['finished_quantity'])
    return running_sheets

cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty

if estimate.fieldUpdated in ['workcenterId']:
    qty_params['param_additional_charge'] = workcenter.additional_charge
    #cost_params['param_make_ready_time'] = (workcenter.make_ready_time) if qty != 'run_on' else 0.0
    #cost_params['param_machine_speed'] = workcenter.machine_speed
    cost_params['cost_per_unit'] = workcenter.standard_price
    cost_params['price_per_unit'] = workcenter.list_price
    cost_params['margin'] = workcenter.margin_percent

sheets_to_process = calculate_working_sheets_needed(qty_params, cost_params, qty) 

if cost_params['param_machine_speed'] :
    cost_params['param_running_time'] = sheets_to_process / cost_params['param_machine_speed']
else :
    cost_params['param_running_time'] = 0.0
    
total_hours = cost_params['param_make_ready_time'] + cost_params['param_running_time']

cost_params['quantity_required'] = round(total_hours, 2)

estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
   
    <record id="packing" model="bb_process.process">
        <field name="name">Packing</field>
        <field name="estimate">
cost_params = estimate.cost_params
qty_params = estimate.qty_params
qty = estimate.qty
if estimate.fieldUpdated in ['workcenterId']:
    qty_params['param_sheets_per_box'] = workcenter.sheets_per_box
    qty_params['param_time_per_box'] = workcenter.time_per_box
    qty_params['cost_per_unit'] = workcenter.standard_price
    qty_params['price_per_unit'] = workcenter.list_price
    qty_params['margin'] = workcenter.margin_percent

sheets_to_process = cost_params['finished_quantity']

number_of_boxes = sheets_to_process / float(qty_params['param_sheets_per_box'])

total_hours = number_of_boxes * qty_params['param_time_per_box']

cost_params['quantity_required'] = round(total_hours, 2)
estimate.update(qty_params,cost_params,qty)
        </field>
    </record>
   
    </data>
</odoo> 